global M;M = 64;global N;N = 64;function y = f(x) % Signal generator  y = cos(2*x);endfunction y = g(x, w) % Polynomial fit  global M;  sum = 0;  for i=1:M    sum = sum + w(i) * x.^(i-1);  end  y = sum;endfunction y = outerProduct(a, b)  y = a.'*b;endfunction y = vandermonde(x)  global M;  for i=1:M    y(i) = x^(i-1);  endendfunction y = A(x)  global M;  global N;  summation = zeros(M,M);  for i=1:N    summation = summation + outerProduct(vandermonde(x(i)), vandermonde(x(i)));  end  y = summation;endfunction y = b(x, t)  global M;  global N;  summation = zeros(1, M);  for i=1:N    summation = summation + vandermonde(x(i)) * t(i);  end  y = summation;endclf;x = linspace(-pi, pi, N);y = f(x);%n = rand(1, N);%for i=1:N%  n(i) = n(i) - 0.5;%endw = inverse(A(x)) * b(x, y)'; %Add noise manuallyhold on;plot(x, y, 'b*');x = linspace(-3, 3);y = g(x, w);plot(x, y, 'r');%title(strcat('M:', num2str(M)));%saveas(gcf, strcat(num2str(M), '.png'));%saveas(gcf, 'data-noise.png');