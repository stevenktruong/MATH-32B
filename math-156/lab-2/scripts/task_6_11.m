im = imread('digit_image.mat');global dim = size(im);% Switching between different representations of an imagefunction y = toMatrix(x)  global dim;  y = reshape(x, dim);end% Reshape into a column vectorfunction y = toVector(x)  global dim;  y = reshape(x, [], 1);end% Draw an image from an image vectorfunction drawVector(x)  imshow(toMatrix(x), []);end%%%% Beginning of task code %%%%% Generate sample dataN = 200;angles = linspace(0, 180, N);for i=1:N  newIm(:, :, i) = imrotate(im, angles(i), 'nearest', 'crop');end% Generate vector representations and put them as columns in a matriximVec = toVector(im);for i=1:N  newImVec(:, i) = toVector(newIm(:, :, i));end% Calculate sample mean and data covariancexbar = mean(newImVec')';S = cov(newImVec');% Generate the k largest eigenvalues and eigenvectorsk = 10;[V D] = eigs(S, k);D = diag(D);% Project vector x onto the k principal componentsx = double(imVec); % Original image converted to a double row matrixy = zeros(size(vec(x)));for i=1:k  c = dot(x - xbar, V(:, i));  y = y + c * V(:, i);endy = y + xbar;drawVector(y);