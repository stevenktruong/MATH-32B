load two_moons.mat[dim, dataSize] = size(data);N = 100; % Number of classes considered known% In data, each column is an observation.% Covariance and mean treat rows as observationsC = data';S = cov(C); mu = mean(C);C1 = zeros(1, dim);C2 = zeros(1, dim);sizeC1 = 0;sizeC2 = 0;for i = 1:N  if (labels(i) == 1)    C1 = [C(i, :); C1];    sizeC1 = sizeC1 + 1;  else    C2 = [C(i, :); C2];    sizeC2 = sizeC2 + 1;  endend% Remove extra rowC1 = C1(1:sizeC1, :);C2 = C2(1:sizeC2, :);k = 2; % Number of components for PCA[V, D] = eigs(S, k);% 2D PCA ProjectionprojC1 = zeros(sizeC1, k);for i = 1:sizeC1  projC1(i, 1) = dot(C1(i, :)', V(:, 1));  projC1(i, 2) = dot(C1(i, :)', V(:, 2));endprojC2 = zeros(sizeC2, k);for i = 1:sizeC2  projC2(i, 1) = dot(C2(i, :)', V(:, 1));  projC2(i, 2) = dot(C2(i, :)', V(:, 2));endprojCC = zeros(dataSize - N, k);for i = (N+1):dataSize  projCC(i, 1) = dot(C(i, :)', V(:, 1));  projCC(i, 2) = dot(C(i, :)', V(:, 2));endclf;hold on;plot(projCC(:, 1), projCC(:, 2), 'g.');plot(projC1(:, 1), projC1(:, 2), 'r*');plot(projC2(:, 1), projC2(:, 2), 'bo');legend('D\C', 'C1', 'C2');t = labels(1:N);findCoefficient(C, t, 1);